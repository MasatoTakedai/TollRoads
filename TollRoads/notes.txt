You can determine if an edge has been inverted by using this function.

private bool IsInverted(Entity edge, int index, NativeArray<AggregateElement> aggregateElements)
{
	if (index > 0)
	{
		Edge edge2 = m_EdgeData[aggregateElements[index - 1].m_Edge];
		Edge edge3 = m_EdgeData[edge];
		if (!(edge3.m_End == edge2.m_Start))
		{
			return edge3.m_End == edge2.m_End;
		}
		return true;
	}
	if (index < aggregateElements.Length - 1)
	{
		Edge edge4 = m_EdgeData[edge];
		Edge edge5 = m_EdgeData[aggregateElements[index + 1].m_Edge];
		if (!(edge4.m_Start == edge5.m_Start))
		{
			return edge4.m_Start == edge5.m_End;
		}
		return true;
	}
	return false;
}

aggregateElements obtained from Game.Net.Aggregated from the Road entity.


However, knowing if an edge is inverted may not be necessary.
The Game.Net.EdgeLane.m_EdgeDelta can be used for determining if a lane is left or right side compared to the start node. (larger value is the correct side I think)
We can then use the bezier curve from the owner road entity to determine if the raycast hitpoint is to the left or right of it,
then use the m_EdgeDelta to find the lane on the correct side.  Single lanes will not have a masterlane but will also not have a slavelane.